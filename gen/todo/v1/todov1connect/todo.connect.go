// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: todo/v1/todo.proto

package todov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "todo/gen/todo/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TodoServiceName is the fully-qualified name of the TodoService service.
	TodoServiceName = "todo.v1.TodoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TodoServiceAddTodoProcedure is the fully-qualified name of the TodoService's AddTodo RPC.
	TodoServiceAddTodoProcedure = "/todo.v1.TodoService/AddTodo"
	// TodoServiceDoneTodoProcedure is the fully-qualified name of the TodoService's DoneTodo RPC.
	TodoServiceDoneTodoProcedure = "/todo.v1.TodoService/DoneTodo"
	// TodoServiceDeleteTodoProcedure is the fully-qualified name of the TodoService's DeleteTodo RPC.
	TodoServiceDeleteTodoProcedure = "/todo.v1.TodoService/DeleteTodo"
	// TodoServiceListTodoProcedure is the fully-qualified name of the TodoService's ListTodo RPC.
	TodoServiceListTodoProcedure = "/todo.v1.TodoService/ListTodo"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	todoServiceServiceDescriptor          = v1.File_todo_v1_todo_proto.Services().ByName("TodoService")
	todoServiceAddTodoMethodDescriptor    = todoServiceServiceDescriptor.Methods().ByName("AddTodo")
	todoServiceDoneTodoMethodDescriptor   = todoServiceServiceDescriptor.Methods().ByName("DoneTodo")
	todoServiceDeleteTodoMethodDescriptor = todoServiceServiceDescriptor.Methods().ByName("DeleteTodo")
	todoServiceListTodoMethodDescriptor   = todoServiceServiceDescriptor.Methods().ByName("ListTodo")
)

// TodoServiceClient is a client for the todo.v1.TodoService service.
type TodoServiceClient interface {
	AddTodo(context.Context, *connect.Request[v1.AddTodoRequest]) (*connect.Response[v1.AddTodoResponse], error)
	DoneTodo(context.Context, *connect.Request[v1.DoneTodoRequest]) (*connect.Response[v1.DoneTodoResponse], error)
	DeleteTodo(context.Context, *connect.Request[v1.DeleteTodoRequest]) (*connect.Response[v1.DeleteTodoResponse], error)
	ListTodo(context.Context, *connect.Request[v1.ListTodoRequest]) (*connect.Response[v1.ListTodoResponse], error)
}

// NewTodoServiceClient constructs a client for the todo.v1.TodoService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTodoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TodoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &todoServiceClient{
		addTodo: connect.NewClient[v1.AddTodoRequest, v1.AddTodoResponse](
			httpClient,
			baseURL+TodoServiceAddTodoProcedure,
			connect.WithSchema(todoServiceAddTodoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		doneTodo: connect.NewClient[v1.DoneTodoRequest, v1.DoneTodoResponse](
			httpClient,
			baseURL+TodoServiceDoneTodoProcedure,
			connect.WithSchema(todoServiceDoneTodoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteTodo: connect.NewClient[v1.DeleteTodoRequest, v1.DeleteTodoResponse](
			httpClient,
			baseURL+TodoServiceDeleteTodoProcedure,
			connect.WithSchema(todoServiceDeleteTodoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTodo: connect.NewClient[v1.ListTodoRequest, v1.ListTodoResponse](
			httpClient,
			baseURL+TodoServiceListTodoProcedure,
			connect.WithSchema(todoServiceListTodoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// todoServiceClient implements TodoServiceClient.
type todoServiceClient struct {
	addTodo    *connect.Client[v1.AddTodoRequest, v1.AddTodoResponse]
	doneTodo   *connect.Client[v1.DoneTodoRequest, v1.DoneTodoResponse]
	deleteTodo *connect.Client[v1.DeleteTodoRequest, v1.DeleteTodoResponse]
	listTodo   *connect.Client[v1.ListTodoRequest, v1.ListTodoResponse]
}

// AddTodo calls todo.v1.TodoService.AddTodo.
func (c *todoServiceClient) AddTodo(ctx context.Context, req *connect.Request[v1.AddTodoRequest]) (*connect.Response[v1.AddTodoResponse], error) {
	return c.addTodo.CallUnary(ctx, req)
}

// DoneTodo calls todo.v1.TodoService.DoneTodo.
func (c *todoServiceClient) DoneTodo(ctx context.Context, req *connect.Request[v1.DoneTodoRequest]) (*connect.Response[v1.DoneTodoResponse], error) {
	return c.doneTodo.CallUnary(ctx, req)
}

// DeleteTodo calls todo.v1.TodoService.DeleteTodo.
func (c *todoServiceClient) DeleteTodo(ctx context.Context, req *connect.Request[v1.DeleteTodoRequest]) (*connect.Response[v1.DeleteTodoResponse], error) {
	return c.deleteTodo.CallUnary(ctx, req)
}

// ListTodo calls todo.v1.TodoService.ListTodo.
func (c *todoServiceClient) ListTodo(ctx context.Context, req *connect.Request[v1.ListTodoRequest]) (*connect.Response[v1.ListTodoResponse], error) {
	return c.listTodo.CallUnary(ctx, req)
}

// TodoServiceHandler is an implementation of the todo.v1.TodoService service.
type TodoServiceHandler interface {
	AddTodo(context.Context, *connect.Request[v1.AddTodoRequest]) (*connect.Response[v1.AddTodoResponse], error)
	DoneTodo(context.Context, *connect.Request[v1.DoneTodoRequest]) (*connect.Response[v1.DoneTodoResponse], error)
	DeleteTodo(context.Context, *connect.Request[v1.DeleteTodoRequest]) (*connect.Response[v1.DeleteTodoResponse], error)
	ListTodo(context.Context, *connect.Request[v1.ListTodoRequest]) (*connect.Response[v1.ListTodoResponse], error)
}

// NewTodoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTodoServiceHandler(svc TodoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	todoServiceAddTodoHandler := connect.NewUnaryHandler(
		TodoServiceAddTodoProcedure,
		svc.AddTodo,
		connect.WithSchema(todoServiceAddTodoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceDoneTodoHandler := connect.NewUnaryHandler(
		TodoServiceDoneTodoProcedure,
		svc.DoneTodo,
		connect.WithSchema(todoServiceDoneTodoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceDeleteTodoHandler := connect.NewUnaryHandler(
		TodoServiceDeleteTodoProcedure,
		svc.DeleteTodo,
		connect.WithSchema(todoServiceDeleteTodoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceListTodoHandler := connect.NewUnaryHandler(
		TodoServiceListTodoProcedure,
		svc.ListTodo,
		connect.WithSchema(todoServiceListTodoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/todo.v1.TodoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TodoServiceAddTodoProcedure:
			todoServiceAddTodoHandler.ServeHTTP(w, r)
		case TodoServiceDoneTodoProcedure:
			todoServiceDoneTodoHandler.ServeHTTP(w, r)
		case TodoServiceDeleteTodoProcedure:
			todoServiceDeleteTodoHandler.ServeHTTP(w, r)
		case TodoServiceListTodoProcedure:
			todoServiceListTodoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTodoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTodoServiceHandler struct{}

func (UnimplementedTodoServiceHandler) AddTodo(context.Context, *connect.Request[v1.AddTodoRequest]) (*connect.Response[v1.AddTodoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.TodoService.AddTodo is not implemented"))
}

func (UnimplementedTodoServiceHandler) DoneTodo(context.Context, *connect.Request[v1.DoneTodoRequest]) (*connect.Response[v1.DoneTodoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.TodoService.DoneTodo is not implemented"))
}

func (UnimplementedTodoServiceHandler) DeleteTodo(context.Context, *connect.Request[v1.DeleteTodoRequest]) (*connect.Response[v1.DeleteTodoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.TodoService.DeleteTodo is not implemented"))
}

func (UnimplementedTodoServiceHandler) ListTodo(context.Context, *connect.Request[v1.ListTodoRequest]) (*connect.Response[v1.ListTodoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.TodoService.ListTodo is not implemented"))
}
